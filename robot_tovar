% Задаем координаты точек (товаров)
tovar = [0.15, 0.15; 0.45, 0.55; 0.45, 0.35]; % Пример координат

% Начальная позиция (текущий товар)
robot = [0.95, 0.95]; % Замените на ваши координаты

punktnaznachenia = [0.95, 0.05];

current_position = robot;%текущая позиция

% Инициализация переменных
num = size(tovar, 1);
visited = false(num, 1); % Для отслеживания посещенных товаров

sum_distance = 0;

route = current_position;

while sum(visited) < num
    % Инициализация массивов для расстояний и индексов
    %distances = zeros(num, 1);
    distances = Inf(num, 1);

    % Цикл по всем товарам
    for i = 1:num
        if ~visited(i) % Игнорируем уже посещенные товары
            % Вычисляем расстояние от текущей позиции до товара
            distances(i) = abs(current_position(1) - tovar(i, 1)) + abs(current_position(2) - tovar(i, 2));
        end
    end
    
    % Находим индекс ближайшего товара
    [min_distance, closest_index] = min(distances);
    
    % Обновляем текущую позицию
    current_position = tovar(closest_index, :);
    visited(closest_index) = true; % Отмечаем товар как посещенный

    sum_distance = sum_distance + min_distance;%сумма расстояний

    route = [route; current_position];
    
     % Выводим порядок индексов и расстояний
    [sorted_distances, index_order] = sort(distances);
    disp('Порядок индексов товара по удаленности и расстояния:');
    for j = 1:num
        if sorted_distances(j) < inf
            fprintf('Индекс: %d, Расстояние: %.2f\n', index_order(j), sorted_distances(j));
        end
    end

    % Выводим информацию о ближайшем товаре
    fprintf('Ближайший товар: индекс = %d, расстояние = %.2f\n', closest_index, min_distance);
    disp('Индекс товара:');
    disp(closest_index);
    disp('Расстояние до товара:');
    disp(min_distance);
end

fprintf('Сумма расстояний до всех товаров: %.2f\n', sum_distance);
disp('Все товары были посещены.');

distances = abs(current_position(1) - punktnaznachenia(1)) + abs(current_position(2) - punktnaznachenia(2));
disp('Расстояние от последнего товара до пункта назначения:');
disp(distances*100);
sum_distance = sum_distance + distances;
disp('Расстояние от робота до пункта назначения:');
disp(sum_distance*100);%масштабирование

% Построение графика
figure;
hold on; 

plot(x_kvadrat, y_kvadrat, 'b', 'LineWidth', 2); 
plot(x_priamougolnik, y_priamougolnik, 'b', 'LineWidth', 2); 
% Заштриховка области внутри прямоугольника
fill(x_priamougolnik, y_priamougolnik, 'b', 'FaceAlpha', 0.5); % Заштриховать прямоугольник
plot(punktnaznachenia(1), punktnaznachenia(2), 'bo', 'MarkerSize', 10, 'MarkerFaceColor', 'b'); % Начальная точка
plot(robot(1), robot(2), 'rx', 'MarkerSize', 10); % Позиция робота
plot(tovar(:, 1), tovar(:, 2), 'r^', 'MarkerSize', 10); % Товары
plot(route(:, 1), route(:, 2), 'b--','LineWidth', 2); % Товары

%эта часть нужно записать циклом
%его вписать в другой цикл, где идёт обновление текущей позиции
plot([tovar(2, 1), tovar(2, 1)], [tovar(2, 2), robot(1)], 'k--'); % Вертикальная линия
plot([tovar(2, 1), robot(2)], [robot(2), robot(2)], 'k--'); % Горизонтальная линия

plot([tovar(3, 1), tovar(3, 1)], [tovar(3, 2), tovar(2, 2)], 'k--'); % Вертикальная линия
plot([tovar(2, 1), tovar(3, 1)], [tovar(2, 2), tovar(2, 2)], 'k--'); % Горизонтальная линия

plot([tovar(1, 1), tovar(1, 1)], [tovar(1, 2), tovar(3, 2)], 'k--'); % Вертикальная линия
plot([tovar(3, 1), tovar(1, 1)], [tovar(3, 2), tovar(3, 2)], 'k--'); % Горизонтальная линия

plot([punktnaznachenia(1), punktnaznachenia(1)], [tovar(1, 2), punktnaznachenia(2)], 'k--'); % Вертикальная линия
plot([tovar(1, 1), punktnaznachenia(1)], [tovar(1, 2), tovar(1, 2)], 'k--'); % Горизонтальная линия
%эта часть нужно записать циклом

% Включение сетки
grid on; % Включить сетку
set(gca, 'GridLineStyle', '-'); % Установить стиль линий сетки
set(gca, 'GridColor', 'k'); % Установить цвет линий сетки
set(gca, 'GridAlpha', 1); % Установить прозрачность линий сетки
title('Квадратное поле');
xlabel('X');
ylabel('Y');
axis equal; % Установить равные масштабы для осей




robot =  [2, 3];
punktnaznachenia = [5, 10];

rows = 10;
cols = 10;
field = ones(cols, rows);
field(robot(1), robot(2)) = 15;
field(3, 4) = Inf;
field(4, 4) = Inf;
field(5, 4) = Inf;
field(5, 3) = Inf;
field(8, 5) = Inf;
field(9, 5) = Inf;
field(10, 5) = Inf;
field(10, 6) = Inf;
field(4, 8) = Inf;
field(5, 8) = Inf;
field(3, 8) = Inf;
field(3, 3) = Inf;

field(5, 10) = 100;% чтобы было видно конечную точку (потом убрать)
[cols, rows] = size(field);
%disp(field);

figure;
hold on; 

for c = 1:cols
    for r = 1:rows
        if field(c, r) == Inf
            fill([c-1 c c c-1], [r-1 r-1 r r], 'k')
        else
            fill([c-1 c c c-1], [r-1 r-1 r r], 'w')
        end
    end
end

fill([robot(1)-1 robot(1) robot(1) robot(1)-1], ...
    [robot(2)-1 robot(2)-1 robot(2) robot(2)], 'r');
fill([punktnaznachenia(1)-1 punktnaznachenia(1) punktnaznachenia(1) punktnaznachenia(1)-1], ...
    [punktnaznachenia(2)-1 punktnaznachenia(2)-1 punktnaznachenia(2) punktnaznachenia(2)], 'b');
axis equal; % Установить равные масштабы для осей
xlim([0 cols])
ylim([0 rows])
% Включение сетки
grid on
set(gca, 'Color', 'w'); 
title('Квадратное поле');
xlabel('X');
ylabel('Y');


current_row = robot(2);%текущая позиция
current_col = robot(1);%текущая позиция
current_position = [current_col, current_row];
%время преодоления каждой клетки
time = field;
disp(time);




if field(current_position) ~= Inf
    if current_col > 1 && field(current_col-1, current_row) ~= Inf
        fprintf("Из клетки (%d, %d) можно перейти в левую клетку (%d, %d).\n", current_col, current_row, current_col-1, current_row);
        %
        new_position1 = [current_col - 1, current_row];
        disp(new_position1);
        %%%
        time(current_col - 1, current_row) = time(current_col, current_row) + time(current_col - 1, current_row);
        disp(time);
        
    else
        fprintf("Клетка (%d, %d) является препятствием.\n", current_col-1, current_row)
    end
    if cols > current_col && field(current_col+1, current_row) ~= Inf
        fprintf("Из клетки (%d, %d) можно перейти в правую клетку (%d, %d).\n", current_col, current_row, current_col+1, current_row);
        %
        new_position2 = [current_col + 1, current_row];
        disp(new_position2);
        %%%
        time(current_col + 1, current_row) = time(current_col, current_row) + time(current_col + 1, current_row);
        disp(time);
        
    else
        fprintf("Клетка (%d, %d) является препятствием.\n", current_col+1, current_row)
    end
    if current_row > 1 && field(current_col, current_row-1) ~= Inf
        fprintf("Из клетки (%d, %d) можно перейти в нижнюю клетку (%d, %d).\n", current_col, current_row, current_col, current_row-1);
        %
        new_position3 = [current_col, current_row - 1];
        disp(new_position3);
        %%%
        time(current_col, current_row - 1) = time(current_col, current_row) + time(current_col, current_row - 1);
        disp(time);
        
    else
        fprintf("Клетка (%d, %d) является препятствием.\n", current_col, current_row-1)
    end
    if rows > current_row && field(current_col, current_row+1) ~= Inf
        fprintf("Из клетки (%d, %d) можно перейти в верхнюю клетку (%d, %d).\n", current_col, current_row, current_col, current_row+1);
        %
        new_position4 = [current_col, current_row + 1];
        disp(new_position4);
        %%%
        time(current_col, current_row + 1) = time(current_col, current_row) + time(current_col, current_row + 1);
        disp(time);
        %time(current_col, current_row) = 0;
    else
        fprintf("Клетка (%d, %d) является препятствием.\n", current_col, current_row+1)
    end
end


